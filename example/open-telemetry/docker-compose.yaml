version: '3.0'

services:

  prometheus:
    image: prom/prometheus:v2.27.1
    container_name: prometheus
    hostname: prometheus
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--enable-feature=exemplar-storage'   # https://vbehar.medium.com/using-prometheus-exemplars-to-jump-from-metrics-to-traces-in-grafana-249e721d4192
    ports:
      - 9090:9090
    networks:
      - almex-net
    restart: on-failure

  grafana:
    image: grafana/grafana:8.0.3
    container_name: grafana
    hostname: grafana
    user: "472"
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./grafana/config.monitoring
    networks:
      - almex-net
    restart: on-failure

  alertmanager:
    image: prom/alertmanager:v0.21.0
    container_name: alertmanager
    hostname: alertmanager
    ports:
      - 9093:9093
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    networks:
      - almex-net
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'

  jaeger-collector:
      image: jaegertracing/jaeger-collector:1.22.0
      command: ["--es.num-shards=1", "--es.num-replicas=0", "--es.server-urls=http://elasticsearch:9200", "--collector.zipkin.host-port=:9411"]
      container_name: jaeger-collector
      hostname: jaeger-collector
      ports:
        - "14269"
        #- "14268:14268"
        - "14250"
        - "9411:9411"
      environment:
        - SPAN_STORAGE_TYPE=elasticsearch
        - LOG_LEVEL=info
      restart: on-failure
      depends_on:
        - elasticsearch
      networks:
        - almex-net

  jaeger-query:
    image: jaegertracing/jaeger-query:1.22.0
    command: ["--es.num-shards=1", "--es.num-replicas=0", "--es.server-urls=http://elasticsearch:9200"]
    container_name: jaeger-query
    hostname: jaeger-query
    ports:
      - "16686:16686"
      - "16687"
    environment:
      - SPAN_STORAGE_TYPE=elasticsearch
      - LOG_LEVEL=info
    restart: on-failure
    depends_on:
      - elasticsearch
    networks:
      - almex-net

  jaeger-agent:
    image: jaegertracing/jaeger-agent:1.22.0
    command: ["--reporter.grpc.host-port=jaeger-collector:14250", "--reporter.grpc.retry.max=1000"]
    container_name: jaeger-agent
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
    environment:
      - LOG_LEVEL=info
    restart: on-failure
    depends_on:
      - jaeger-collector
    networks:
    - almex-net

  collector:
    image: otel/opentelemetry-collector-contrib-dev:latest
    container_name: collector
    hostname: collector
    command: ["--config=/etc/collector-config.yaml"]
    volumes:
      - ./collector-config.yaml:/etc/collector-config.yaml
    ports:
      - "13133:13133"
      - "55680:55680"
      - "8888:8888"
      - "8889:8889"
    networks:
    - almex-net
    restart: on-failure
    depends_on:
      tempo:
        condition: service_started

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.0
    container_name: elasticsearch
    environment:
    - bootstrap.memory_lock=true
    - cluster.name=docker-cluster
    - cluster.routing.allocation.disk.threshold_enabled=false
    - discovery.type=single-node
    - ES_JAVA_OPTS=-XX:UseAVX=2 -Xms1g -Xmx1g
    ulimits:
      memlock:
        hard: -1
        soft: -1
    volumes:
    - esdata:/usr/share/elasticsearch/data
    ports:
    - 9200:9200
    networks:
    - almex-net
    healthcheck:
      interval: 300s
      retries: 20
      test: curl -s http://localhost:9200/_cluster/health | grep -vq '"status":"red"'

  fluent-bit:
    image: fluent/fluent-bit:1.7.3
    container_name: fluent-bit
    hostname: fluent-bit
    ports:
      - 24224:24224
      - 24224:24224/udp
    volumes:
      - ./fluent-bit/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf
      - ./fluent-bit/parsers.conf:/fluent-bit/etc/parsers.conf
    depends_on:
      elasticsearch:
        condition: service_healthy
      loki:
        condition: service_started
    networks:
      - almex-net

  kibana:
    image: docker.elastic.co/kibana/kibana:7.10.0
    container_name: kibana
    depends_on:
      elasticsearch:
        condition: service_healthy
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
    - 5601:5601
    networks:
    - almex-net
    healthcheck:
      interval: 300s
      retries: 20
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:5601/api/status

  # TODO: split this docker-compose file by cases but sharing network.
  # See https://stackoverflow.com/questions/38088279/communication-between-multiple-docker-compose-projects
  tempo:
    image: grafana/tempo:1.0.1
    container_name: tempo
    hostname: tempo
    command: ["--target=all", "--storage.trace.backend=local", "--storage.trace.local.path=/var/tempo", "--auth.enabled=false"]
    ports:
      - 8081:80
      - 14268:14268  # jaeger ingest
      - 3101:3100   # tempo
      # - 9411:9411   # zipkin
      - 6831:6831/udp
      - 6831:6831
      - 14250:14250
    volumes:
      - tempo_data:/var/tempo
    restart: on-failure
    networks:
      - almex-net

  tempo-query:
    image: grafana/tempo-query:1.0.1
    container_name: tempo-query
    hostname: tempo-query
    #command: ["--grpc-storage-plugin.configuration-file=/etc/tempo-query.yaml"]
    environment:
      - BACKEND=tempo:80
    volumes:
      - ./etc/tempo-query.yaml:/etc/tempo-query.yaml
    ports:
      - "16688:16686"  # move to 16686 for fully jaeger-ui compat
    depends_on:
      - tempo
      - fluent-bit
    networks:
      - almex-net

  loki:
    image: grafana/loki:2.2.1
    container_name: loki
    hostname: loki
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - 3100:3100
    networks:
      - almex-net
    restart: on-failure

  almaraz-example-app:
    image: docker.io/library/almaraz-example:0.2.7
    container_name: almaraz-example-app
    hostname: almaraz-example-app
    ports:
      - 8080:8080
      - 8090:8090
    volumes:
      - ./agent/opentelemetry-javaagent-all.jar:/agent/otel-agent.jar
    environment:
      - "JAVA_OPTS=-javaagent:/agent/otel-agent.jar -Dotel.resource.attributes=service.name=almaraz-example -Dotel.exporter.otlp.endpoint=http://collector:55680 -Dotel.metrics.exporter=none"
    restart: on-failure
    depends_on:
      - elasticsearch
      - fluent-bit
    networks:
      - almex-net
    logging:
      driver: fluentd

volumes:
  esdata:
    driver: local
  prometheus_data: { }
  grafana_data: { }
  tempo_data: { }

networks:
  almex-net:
    driver: bridge
